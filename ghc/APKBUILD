#-*-mode: Shell-script; coding: utf-8;-*-
# Contributor: Mitch Tishmack <mitch.tishmack@gmail.com>
# Maintainer: Mitch Tishmack <mitch.tishmack@gmail.com>
pkgname=ghc
pkgdesc="The Glasgow haskell compiler"
# We patch ghc 7.10 to use llvm 3.6 to keep things simpler
llvm_major=3.6
llvm_version=${llvm_major}.2
llvm_srcdir="$srcdir/llvm-${llvm_version}.src"
# For the future
ghc_extra=""
builddir_extra=""
apkgver=7.10.3b
pkgrel=2
ghc_extra="
	ghc-0001-no-dllsplit.patch
	ghc-0002-llvm-3.6.patch
"
pkgver=$(echo ${apkgver} | tr -d '[a-z]')
_builddir="$srcdir/$pkgname-$pkgver$builddir_extra"
url="http://haskell.org"
subpackages="$pkgname-doc $pkgname-dev cabal"
arch="x86_64"
cabal_version=1.22.7.0
cabal_release=1
suffix="-${llvm_major}"
opt=opt${suffix}
llc=llc${suffix}
# Note ghc's license is basically bsd3. If you'd like to know more visit:
# https://www.haskell.org/ghc/license
# https://ghc.haskell.org/trac/ghc/wiki/Licensing
#
# Included llvm is UIO-NCSA licensed. Included as ghc is sensitive to the version
# of llvm used. Given llvm is not always forward/backward compatible we build it
# here as well. Note, ghc 8.0 will be doing the same for tier 1 platforms so being
# consistent with the future.
#
# Ref: https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-8.0.1
#      https://ghc.haskell.org/trac/ghc/wiki/ImprovedLLVMBackend
#
# It is ONLY needed for opt and llc respectively, llvm is not fully installed.
# ghc source
source="
	https://www.haskell.org/ghc/dist/$pkgver/ghc-$apkgver-src.tar.xz
	$ghc_extra
	"
# cabal source
source="
	$source
	https://www.haskell.org/cabal/release/cabal-install-${cabal_version}/cabal-install-${cabal_version}.tar.gz
	"
# llvm source
source="
	$source
	llvm-0001-fix-shared-build.patch
	llvm-0002-musl-triple.patch
	llvm-0003-musl-hacks.patch
	http://llvm.org/releases/$llvm_version/llvm-$llvm_version.src.tar.xz
	http://llvm.org/releases/$llvm_version/polly-$llvm_version.src.tar.xz
	"
llvm_builddir="$srcdir/build"
polly_orig_srcdir="$srcdir"/polly-$llvm_version.src

license="custom:bsd3"
depends="bash gmp-dev libffi musl zlib ncurses gcc binutils-gold"
install=""
dev_depends="
	$depends
	perl
	linux-headers
	musl-dev
	ncurses-dev
	gmp-dev
	libffi-dev
	zlib-dev
	"
# ghc build dependencies, mostly relating to documentation
makedepends="
	$dev_depends
	docbook-xsl
	libxml2
	libxml2-doc
	libxslt
	libxslt-doc
	"

# llvm build dependencies
makedepends="
	$depends
	$makedepends
	perl
	cmake
	make
	flex
	bison
	groff
	musl-dev
	binutils-dev
	libffi-dev
	zlib-dev
	ncurses-dev
	python
	python-dev
	gmp-dev
	clang
	git
	libtool
	autoconf
	automake
	"

makedepends="ghc $makedepends"

prepare() {
	# LLVM patches
	msg "Patching llvm"
	cd "$llvm_srcdir"
	update_config_sub || return 1
	sed -i -e '/case "\${UNAME_MACHINE}:\${UNAME_SYSTEM}:\${UNAME_RELEASE}:\${UNAME_VERSION}" in/i \' -e 'if [ x != "x$CBUILD" ]; then echo "$CBUILD"; exit; fi' autoconf/config.guess || return 1
	for i in $source; do
		case $i in
			llvm-*.patch)
				msg "Applying $i..."
				patch -s -p1 -N -i "$srcdir"/$i || return 1
				;;
		esac
	done
	msg "Patching ghc"
	cd $_builddir
	for i in $source; do
		case $i in
			ghc-*.patch)
				msg "Applying $i..."
				patch -s -p1 -N -i "$srcdir"/$i || return 1
				;;
		esac
	done
}

# Stupid simple test to ensure the ghc we're using basically works.
ghc_llvm_opts=" -fllvm -pgmlc $llc -pgmlo $opt "
basic_check() {
	cd "$_builddir"
	echo 'main = putStrLn "ok"'> test.hs || return 1
	ghc ${ghc_llvm_opts} -fPIC --make test.hs || return 1
	./test || return 1
	rm test test.o test.hi test.hs || return 1
}

# Generate our build.mk file.
generate_build_mk() {
	cat > mk/build.mk << "FIN"
SRC_HC_OPTS          += -O2
SRC_HC_OPTS          += -H64m
SRC_CC_OPTS          += -Os
GhcLibHcOpts         += -O2
GhcHcOpts            += -O2
GhcRtsCcOpts         += -Os
GhcStage2HcOpts      += -O2
SplitObjs             = YES
STRIP                 = :
V                     = 0
BeConservative        = YES
FIN

	for x in SRC_HC_OPTS GhcLibHcOpts GhcHcOpts; do
		echo "${x} += ${ghc_llvm_opts}" >> mk/build.mk
	done
}

_ghc_build_tmp="$_builddir/tmp"
_ghc_build_sandbox="$_ghc_build_tmp/.cabal-sandbox"
export PATH=$PATH:"${_ghc_build_tmp}/bin"

# We need happy and alex to build ghc, so install those via
# cabal for now.
#
# TODO: build these as separate sub packages maybe?
# this build script is already crazy enough as it is.
sandbox_prerequisites() {
	msg "Building happy/alex for ghc compile"
	mkdir -p "$_ghc_build_tmp"
	cd "$_ghc_build_tmp"
	(
		export HOME="$_ghc_build_tmp"
		cabal update || return 1
		cabal sandbox init || return 1
		cabal install happy alex || return 1
	) || return 1
}

# Build ghc with the llvm we build earlier into $pkgdir
build_ghc() {
	# By this time we have llvm and cabal installed into $pkgdir
	# ensure we use them by putting them at the start of PATH
	(
		export PATH="$srcdir:${PATH}"
		basic_check || return 1
		sandbox_prerequisites
		cd "${_builddir}"
		generate_build_mk
		# ensure we use the right gmp library
		# maybe make gmp a build option?
		mv libraries/integer-gmp integer-gmp.old || return 1
		ln -s integer-gmp2 libraries/integer-gmp || return 1
		./configure \
			--prefix=/usr \
			--sysconfdir=/etc \
			--mandir=/usr/share/man \
			--infodir=/usr/share/info \
			--localstatedir=/var \
			--with-ld=ld.gold \
			--with-llc=${llc} \
			--with-opt=${opt} || return 1
		make $MAKEOPTS || return 1
	) || return 1
}

# Build cabal via bootstrap.sh and install it into $srcdir
# the subpkg function will yoink the binary from there into $subpkgdir
#
# We set EXTRA_BUILD_OPTS to build a static binary via Setup so
# we can make a fully static cabal binary.
_builddir_cabal="$srcdir/cabal-install-${cabal_version}"
build_cabal() {
	mkdir -p "$_builddir_cabal" || return 1
	cd "$_builddir_cabal"
	(
		export HOME="$_builddir_cabal"
		export PATH="$_builddir_cabal/.cabal-sandbox/bin:$srcdir:${PATH}"
		export NO_DOCUMENTATION=1
		./bootstrap.sh --sandbox || return 1
		export EXTRA_BUILD_OPTS="--ghc-option=-optl=-static --ghc-option=-optl=-pthread --ghc-option=-fPIC --ghc-option=-fllvm --ghc-option=-pgmlo=$opt --ghc-option=-pgmlc=$llc"
		./bootstrap.sh --sandbox || return 1
		install -m755 "$_builddir_cabal/.cabal-sandbox/bin/cabal" "$srcdir/cabal" || return 1
	) || return 1
}

# LLVM related

# All our cmake flags, note that this is literally ONLY llvm.
# todo maybe for future is include polly for the optimizer
_cmake_flags="\
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_VERBOSE_MAKEFILE=NO \
	-DLLVM_DEFAULT_TARGET_TRIPLE=$CBUILD \
	-DLLVM_HOST_TRIPLE=$CHOST \
	-DLLVM_BINUTILS_INCDIR=/usr/include \
	-DLLVM_ENABLE_ASSERTIONS=NO \
	-DLLVM_ENABLE_LIBCXX=NO \
	-DLLVM_ENABLE_PIC=YES \
	-DLLVM_ENABLE_ZLIB=YES \
	-DLLVM_ENABLE_RTTI=YES \
	-DLLVM_BUILD_EXAMPLES=NO \
	-DLLVM_INCLUDE_EXAMPLES=NO \
	-DLIBXML2_INCLUDE_DIR=/usr/include/libxml2 \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DLLVM_TARGETS_TO_BUILD='all' \
	-DLLVM_BUILD_EXTERNAL_COMPILER_RT=NO \
	-DBUILD_SHARED_LIBS=NO \
	-DLLVM_EXTERNAL_POLLY_BUILD=NO \
	-DLINK_POLLY_INTO_TOOLS=NO \
	-DLLVM_BUILD_DOCS=NO \
	-DLLVM_BUILD_TESTS=NO \
	-DLLVM_ENABLE_CXX1Y=NO \
	-DLLVM_ENABLE_FFI=YES \
	-DLLVM_ENABLE_SPHINX=NO \
	-DLLVM_ENABLE_TERMINFO=YES \
	-DWITH_POLLY=YES \
	-DLLVM_INCLUDE_EXAMPLES=NO \
	-DLLVM_INCLUDE_TESTS=NO \
	-DPOLLY_ENABLE_GPGPU_CODEGEN=NO \
	"

# This NEEDs to run first before cabal or ghc builds
#
# Reason being, while we build and install all of llvm for now,
# basically I nuke the entire install and move opt/llc to their
# new binary names as they are just static binaries.
#
# While this inflates the final size a skosh, maybe ~10 megs
# over using a shared library it really saves having to edit
# binary rpaths and whtnot to point llc/opt to the right shared
# library. Which drove me batty so static binaries it is note
# this is just -static in the cmake invocation.
srcdir_polly="$llvm_srcdir"/tools/polly

build_llvm() {
	mv "$srcdir"/polly-$llvm_version.src "$srcdir_polly" || return 1

	# Compile isl separate from the system isl in case alpine includes
	# an incompatible isl version
	build_isl "$srcdir_polly" || return 1
	(
		OCFLAGS="${CFLAGS}"
		OCXXFLAGS="${CXXFLAGS}"
		unset CFLAGS
		unset CXXFLAGS

		test -z "${OCFLAGS}" && OCFLAGS="-O3"
		test -z "${OCXXFLAGS}" && OCXXFLAGS="-O3"

		cflags="${OCFLAGS} -DNDEBUG -I$srcdir/tmp/include"
		cxxflags="${OCXXFLAGS} -DNDEBUG -fno-devirtualize"

		export CBUILD

		ffi_include_dir="$(pkg-config --cflags-only-I libffi | sed 's|^-I||g')"

		cflags="${OCFLAGS} -DNDEBUG"
		cxxflags="${OCXXFLAGS} -DNDEBUG"
		CC="clang"
		CXX="clang++"

		msg "Compiling llvm"
		mkdir -p "${llvm_builddir}"
		cd "${llvm_builddir}"
		cmake -G "Unix Makefiles" -Wno-dev ${_cmake_final_flags} \
			-DCMAKE_C_COMPILER="${CC}" \
			-DCMAKE_CXX_COMPILER="${CXX}" \
			-DCMAKE_C_FLAGS_RELEASE="${cflags}" \
			-DCMAKE_CXX_FLAGS_RELEASE="${cxxflags}" \
			-DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS} -L$srcdir/tmp/lib -static" \
			-DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
			-DFFI_INCLUDE_DIR="$ffi_include_dir" \
			-DCMAKE_PREFIX_PATH="$srcdir/tmp" \
			"${llvm_srcdir}" || return 1

		(
			export LD_LIBRARY_PATH="$srcdir/tmp/lib:$LD_LIBRARY_PATH"
			make llvm-tblgen || return 1
			make || return 1
		) || return 1
		export CFLAGS="${OCFLAGS}"
		export CXXFLAGS="${OCXXFLAGS}"

		# install portion
		make -j1 DESTDIR="$pkgdir" install || return 1

		# Move opt/llc to $srcdir temporarily
		for x in opt llc; do
			install -Dm755 "$pkgdir/usr/local/bin/${x}" "$srcdir/${x}${suffix}" || return 1
		done

		# Remove everything make install put into $pkgdir
		rm -fr "$pkgdir/usr/local" || return 1
	) || return 1
}

# Build the correct version of isl for the llvm version we have
build_isl() {
	msg "Building isl for polly for llvm"
	tmp="$srcdir/tmp"
	install -d ${tmp} || return 1
	isl_srcdir="$tmp/isl"
	cloog_srcdir="$tmp/cloog"
	cd "$srcdir_polly/utils"
	./checkout_cloog.sh ${cloog_srcdir} || return 1
	./checkout_isl.sh ${isl_srcdir} || return 1
	cd "$isl_srcdir"
	./configure --build=$CBUILD \
		--host=$CHOST \
		--prefix=$tmp || return 1
	make || return 1
	make -j1 INSTALL="install -D" install || return 1
}

# In short, we build:
# llvm for opt/llc at the highest working version for the ghc we're building
# cabal via bootstrap.sh so we can build ghc
build() {
	cd "$_builddir"
	if [ -z "$BOOTSTRAP" ]; then
		build_llvm || return 1
		build_cabal || return 1
		build_ghc || return 1
	fi
}

# Install all packages that aren't *technically* required to run ghc/ghci
# that said, without this, jack and squat will generally compile.
dev() {
	depends="$dev_depends"
	pkgdesc="Packages necessary for ghc development"
	install -d "$subpkgdir" || return 1
}

# Install cabal here as well.
cabal() {
	pkgrel=${cabal_release}
	pkgver=${cabal_version}
	depends=""
	pkgdesc="The Haskell Cabal"
	install -Dm755 "$srcdir/cabal" "$subpkgdir/usr/bin/cabal" || return 1
}

# Nothing special here outside of noting that ghc doesn't play nice with pie executables
# on alpine linux. Until https://ghc.haskell.org/trac/ghc/ticket/9007 is fixed
# and ghc can emit pie sanely we need to ensure that -nopie is always used.
#
# This package also includes the "correct" llc and opt we compiled earlier.
package() {
	cd "$_builddir"
	make -j1 DESTDIR="$pkgdir" install || return 1
	settings=$(find "$pkgdir" -name settings -type f)
	install -Dm644 LICENSE "$pkgdir/usr/share/licenses/$pkgname/LICENSE" || return 1
	install -d "$pkgdir/usr/bin" || return 1
	perl -pi -e 's/.*C compiler link flags.*/ \(\"C compiler link flags\"\, \"-nopie\"\)\,/' "$settings" || return 1
	for x in opt llc; do
		lhs="$srcdir/${x}${suffix}"
		rhs="$pkgdir/usr/bin/${x}${suffix}"
		install -m755 "$lhs" "$rhs" || return 1
	done
}

md5sums="d614735d9dac67432f8c6df7e45c76f7  ghc-7.10.3b-src.tar.xz
d60f77f8a1b92674a6895aeac0ebc89b  ghc-0001-no-dllsplit.patch
aee95121df64b898cbb5b845484169ce  ghc-0002-llvm-3.6.patch
12f26ad8585a17a50cdde1a0ea7556d3  cabal-install-1.22.7.0.tar.gz
0947294a8c83c8d7f857dfc16204c4eb  llvm-0001-fix-shared-build.patch
dacc40624cf09fa98de27016bebb1432  llvm-0002-musl-triple.patch
056178d87918d531f531b1b765a59e7c  llvm-0003-musl-hacks.patch
0c1ee3597d75280dee603bae9cbf5cc2  llvm-3.6.2.src.tar.xz
09dd91d06cc0832095379d00206bc3a1  polly-3.6.2.src.tar.xz"
sha256sums="06c6c20077dc3cf7ea3f40126b2128ce5ab144e1fa66fd1c05ae1ade3dfaa8e5  ghc-7.10.3b-src.tar.xz
42ee52717f5a39cbf1510b5a20ad58996fafac155c75dae6c8daf09f26a837d9  ghc-0001-no-dllsplit.patch
964b05e21abf80ef1be3b6d79d4da82b42a7096789ec24f5328584d3ee38a0ab  ghc-0002-llvm-3.6.patch
b30fd14f20fdd11b028cba68fefeed7eeadcacf919e7c29bc4d7289a656d19f3  cabal-install-1.22.7.0.tar.gz
4f75c2a76cf4c439d65c8e67511cd91c895edf8ccf003a5f94ffa07c29456296  llvm-0001-fix-shared-build.patch
98d92c6cb305faff141b1b5a7cfa18656bd80aa478e7a45984f27e60a80bfdd9  llvm-0002-musl-triple.patch
c6892c843b38c9a852367e5d76ffc29c21bdfd522adbc4c4e3e3c890a513c0db  llvm-0003-musl-hacks.patch
f60dc158bfda6822de167e87275848969f0558b3134892ff54fced87e4667b94  llvm-3.6.2.src.tar.xz
f2a956730b76212f22a1c10f35f195795e4d027ad28c226f97ddb8c0fd16bcbc  polly-3.6.2.src.tar.xz"
sha512sums="02b7b0bd5773d6437f1d9e4fd9a742c41006af99fe714af690fdfd107e66bbcb9bc76b66c1624c8fabadc50fef93e2c9e49268bc6f1b21fc04497c7bd795d251  ghc-7.10.3b-src.tar.xz
4a5da8616916c7e81a5857f5407a7e9d4f0aa3f5438ac3b082c157eadf27e4e8ac868a4b8c5dfe614828746376bd61d54e5002b19957188ecf983ea1344a6429  ghc-0001-no-dllsplit.patch
953053996f6b740ae143f29ac4b78340b204e74eef616015a45c1b8edb4af168a9eb8dbc223b3b8181dee3b8d51e30285246ef907191053174ba640b4240db15  ghc-0002-llvm-3.6.patch
a88895ee38bf7451ba6a2e929ff224643ea0a536a9633d463d91a471e41b6aae302af2c3ca4fc914e4b3401fcadb137bb0c68c9fb7d0f768835374aef1b22766  cabal-install-1.22.7.0.tar.gz
b3c0e0f74680e9b2d02f1c923a191ef5eb913be84105e4d63aae6a88b1dac758467cecad3430496a7945cebdc73ec5ee1f643dc5dc7b336fee920e3c8b6d54d2  llvm-0001-fix-shared-build.patch
49203df74402b2e080fafb99a4df54d1822dbd3e4e018c44f2b41c95fcfa01b14c8c505405fd1c8909eac5effd36c60decdc771b4db9a16faf5f980af75c7551  llvm-0002-musl-triple.patch
df8959d43af48054bc35e4125f98e5dab1e1b5beaf7b67e95791caf144efec06764bd31a9eb5efc2179932591de8b862ebf89592d131e47070c89f19412979b7  llvm-0003-musl-hacks.patch
42b44ce69cfb96e2dc12dc2246f0de8ff983a99741206e2c46ccf074b3248aaab9c0f22c6baad802de851d06f202f40db9dd62fe38aab4479b3f70026c936b36  llvm-3.6.2.src.tar.xz
c3b0ce2179fb441dd1b4c99e801a15bcb205e7156ab22c181e6c4f15abaeec7797ef2ce4b8f41ffd31dd90b224290a15e5d94aaf992fb88fe8444cdb55c24ce1  polly-3.6.2.src.tar.xz"
