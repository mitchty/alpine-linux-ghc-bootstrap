# Contributor: Mitch Tishmack <mitch.tishmack@gmail.com>
# Maintainer: Mitch Tishmack <mitch.tishmack@gmail.com>
#
# Note, this ONLY compiles llvm for opt/llc and moves the
# suffixed binaries to /usr/lib/ghc
#
# This allows the ghc/ghc-bootstrap portx to use the correct llvm.
_pkgname=llvm
llvm_major=3.7
llvm_version=${llvm_major}.1
suffix="-${llvm_major}"
opt=opt${suffix}
llc=llc${suffix}
pkgname=ghc-${_pkgname}-${llvm_major}
pkgver=$llvm_version
pkgrel=0
pkgdesc="ghc required llvm binaries"
url="n/a"
arch="x86_64 armhf"
license="UIO-NCSA"
depends=""
install=""
subpackages=""
# llvm build dependencies
makedepends="
        $depends
        $makedepends
        perl
        cmake
        make
        flex
        bison
        groff
        musl-dev
        binutils-dev
        libffi-dev
        zlib-dev
        ncurses-dev
        python
        python-dev
        gmp-dev
        git
        libtool
        autoconf
        automake
        "
_builddir="$srcdir/$pkgname-$pkgver"
# musl patches
source="
        llvm-0002-musl-triple.patch
        llvm-0003-musl-hacks.patch
        "
# Snag tarball for 3.5 from github for https reasons.
source="
       $source
       http://llvm.org/releases/$pkgver/llvm-$pkgver.src.tar.xz
       http://llvm.org/releases/$pkgver/polly-$pkgver.src.tar.xz
       "
_builddir="$srcdir"/build
llvm_srcdir="$srcdir/llvm-$llvm_version.src"
llvm_builddir="$srcdir/build"
srcdir_polly="$srcdir"/polly-$llvm_version.src

_cmake_flags="\
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_VERBOSE_MAKEFILE=NO \
        -DLLVM_DEFAULT_TARGET_TRIPLE=$CBUILD \
        -DLLVM_HOST_TRIPLE=$CHOST \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_ENABLE_ASSERTIONS=NO \
        -DLLVM_ENABLE_LIBCXX=NO \
        -DLLVM_ENABLE_PIC=YES \
        -DLLVM_ENABLE_ZLIB=YES \
        -DLLVM_ENABLE_RTTI=YES \
        -DLLVM_BUILD_EXAMPLES=NO \
        -DLLVM_INCLUDE_EXAMPLES=NO \
        -DLIBXML2_INCLUDE_DIR=/usr/include/libxml2 \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DLLVM_TARGETS_TO_BUILD='all' \
        -DLLVM_BUILD_EXTERNAL_COMPILER_RT=NO \
        -DBUILD_SHARED_LIBS=NO \
        -DLLVM_BUILD_DOCS=NO \
        -DLLVM_BUILD_TESTS=NO \
        -DLLVM_ENABLE_CXX1Y=NO \
        -DLLVM_ENABLE_FFI=YES \
        -DLLVM_ENABLE_SPHINX=NO \
        -DLLVM_ENABLE_TERMINFO=YES \
        -DWITH_POLLY=YES \
        -DLLVM_INCLUDE_EXAMPLES=NO \
        -DLLVM_INCLUDE_TESTS=NO \
        -DLLVM_ENABLE_CURSES=NO \
        -DLLVM_ENABLE_TERMINFO=NO \
        "

prepare() {
        msg "Patching LLVM core..."
        cd "$llvm_srcdir" || return 1
        for i in $source; do
                case $i in
                llvm-*.patch)
                        msg "Applying $i..."
                        patch -s -p1 -N -i "$srcdir"/$i || return 1
                        ;;
                esac
        done
}

build() {
        tmp="$srcdir/tmp"
        install -d ${tmp} || return 1
        mv "$srcdir"/polly-$llvm_version.src ""$llvm_srcdir"/tools/polly" || return 1
        (
                OCFLAGS="${CFLAGS}"
                OCXXFLAGS="${CXXFLAGS}"
                unset CFLAGS
                unset CXXFLAGS

                test -z "${OCFLAGS}" && OCFLAGS="-O3"
                test -z "${OCXXFLAGS}" && OCXXFLAGS="-O3"

                cflags="${OCFLAGS} -DNDEBUG -I$srcdir/tmp/include"
                cxxflags="${OCXXFLAGS} -DNDEBUG -fno-devirtualize"

                export CBUILD

                ffi_include_dir="$(pkg-config --cflags-only-I libffi | sed 's|^-I||g')"

                cflags="${OCFLAGS} -DNDEBUG"
                cxxflags="${OCXXFLAGS} -DNDEBUG"
                CC="gcc"
                CXX="g++"

                msg "Compiling llvm"
                mkdir -p "${llvm_builddir}"
                cd "${llvm_builddir}"
                cmake -G "Unix Makefiles" -Wno-dev ${_cmake_flags} \
                        -DCMAKE_C_COMPILER="${CC}" \
                        -DCMAKE_CXX_COMPILER="${CXX}" \
                        -DCMAKE_C_FLAGS_RELEASE="${cflags}" \
                        -DCMAKE_CXX_FLAGS_RELEASE="${cxxflags}" \
                        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS} -L$srcdir/tmp/lib -static" \
                        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
                        -DFFI_INCLUDE_DIR="$ffi_include_dir" \
                        -DCMAKE_PREFIX_PATH="$srcdir/tmp" \
                        "${llvm_srcdir}" || return 1

                (
                        export LD_LIBRARY_PATH="$srcdir/tmp/lib:$LD_LIBRARY_PATH"
                        make llvm-tblgen llc opt|| return 1
                ) || return 1
        ) || return 1
}

package() {
        cd "$_builddir"
        install -d "$pkgdir/usr/lib/ghc"
        for x in opt llc; do
                install -Dm755 "$srcdir/build/bin/${x}" "$pkgdir/usr/lib/ghc/${x}${suffix}" || return 1
        done
}
md5sums="7fc6f417edec0cd7792df58386396b7d  llvm-0002-musl-triple.patch
f57e1e394bb9b1bdb809dc5b2a8bf04e  llvm-0003-musl-hacks.patch
bf8b3a2c79e61212c5409041dfdbd319  llvm-3.7.1.src.tar.xz
3a2a7367002740881637f4d47bca4dc3  polly-3.7.1.src.tar.xz"
sha256sums="4aa20d16e6afb41a2e6fd916dab9aec28acbf4f7f732524a755973c57daecde1  llvm-0002-musl-triple.patch
028916482184cc29ca2bca4fd59a1cae2c61ee591e3d40fd4e3e9e472629da89  llvm-0003-musl-hacks.patch
be7794ed0cec42d6c682ca8e3517535b54555a3defabec83554dbc74db545ad5  llvm-3.7.1.src.tar.xz
ce9273ad315e1904fd35dc64ac4375fd592f3c296252ab1d163b9ff593ec3542  polly-3.7.1.src.tar.xz"
sha512sums="e136731a82d52b70267c8fc8fdc35340406be577cd26188b0d8273fa3059d5606c4a3f618b02a99820b601dcf86bc3cb1ff9420be463521d978b5dda7764e6e8  llvm-0002-musl-triple.patch
fdd08d4b380d1310282f4d1ee2c5c7b91246346bb275928233fd8a90d2b4c1599556af1f7d7c278fdf13faeee11ac7800ab2912a6e88dba0c9e8f6d906691e0f  llvm-0003-musl-hacks.patch
ac521debc02f6deba96ef975d6a546b0c5c77299c1dbf5e1b87a7974ff5e7fd715bd7e384b92d9adf572ce47130bdbf6d3c648eb0d7f72f16f976292e4909e90  llvm-3.7.1.src.tar.xz
f03a794ab85d587511653e0799c3f2ba95145762552741959decc42cde7f7f5bd80caf79c0169440b7e5d16d3bf895501387d5094f531386d74b6c3e4fe6b1e0  polly-3.7.1.src.tar.xz"
